#!/usr/bin/env python3

import logging
import random
import argparse
import requests
from datetime import datetime
from assets.banner import banner
from assets.colors import red,white,green,reset
from resources.config import api_key,user_agents


class TLsE:
	def __init__(self,args):
		self.base = f"https://api.shodan.io/shodan/host/search?query={args.query}&minify=True&page=1&key={api_key}"
		self.headers = {"User-Agent": f"random.choice(user_agents)"}
		self.response = requests.get(self.base, headers=self.headers).json()
		
	def on_connection(self):
		count=0
		for result in self.response["matches"]:
		    count+=1
		    resp = f"""{white}
Search Query: {red}{args.query}{white}
├ Total Results: {red}{self.response['total']}{white}
└╼ Result Number: {red}{count}{white}

{result['org']}
├ Location: {green}{result['location']}{white}
├─ IP Address: {red}{result['ip_str']}{white}
├── OS: {red}{result['os']}{white}
├─ Hostnames: {green}{result['hostnames']}{white}
├─── Domains:  {green}{result['domains']}{white}
├─ Port:  {red}{result['port']}{white}
├── Network Layer: {green}{result['transport']}{white}
└╼ Banner Information: {green}{result['data']}{white}{reset}
"""
		    print(resp,end=f"{white}_{reset}"*100)
		    if args.outfile:
		        self.output(resp)
			
	def output(self,resp):
	    with open(args.outfile, "a") as file:
	    	file.write(resp)
	    	file.close()


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description=f"{white}The Lord's Eye:{red} IoT OSINT tool developed by {white}rly0nheart | {red} https://github.com/{white}rlyonheart{reset}")
	parser.add_argument("query", help=f"{white}search query; {red}if query contains spaces, put it inside quote symbols {white}''{reset}")
	parser.add_argument("-o", "--outfile", dest="outfile", help=f"{white}output filename{reset}", metavar="FILENAME")
	parser.add_argument("-v", "--verbose", dest="verbose", help=f"{white}verbosity{reset}", action="store_true")
	args = parser.parse_args()
	start = datetime.now()
	if args.verbose:
	    print(banner)
	while True:
		try:
		    if args.verbose:
		        logging.basicConfig(format=f"{white}%(message)s{reset}",level=logging.DEBUG)
		    TLsE(args).on_connection()
		    if args.verbose:
		    	exit(f"\n{white}Stopped in ({red}{datetime.now()-start}{white}) seconds.{reset}")
		    break
			
		except KeyboardInterrupt:
		    if args.verbose:
		    	print(f"{white}Process interrupted ({red}Ctrl{white}+{red}C{white}).{reset}")
		    break
			
		except Exception as e:
		    if args.verbose:
		        print(f"{white}Error: {red}{e}{reset}")
		        print(f"{white}Reconnecting...{reset}")
